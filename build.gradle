buildscript {
    ext {
        springBootVersion = '2.2.0.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } // plugin 저장소
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
    }

}

//모든 하위 프로젝트에 공통으로 적용될 설정
subprojects {
    group = 'com.ccs'
    version = '1.0.0'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
    }

    jacoco {
        toolVersion = '0.8.5'
    }

    test {
        useJUnitPlatform {
            includeEngines 'junit-jupiter', 'junit-vintage'
        }
        jacoco {
            enabled = true
            destinationFile = file("$buildDir/jacoco/${name}.exec")
            includes = []
            excludes = []
            excludeClassLoaders = []
            includeNoLocationClasses = false
            sessionId = "<auto-generated value>"
            dumpOnExit = true
            classDumpDir = null
            output = JacocoTaskExtension.Output.FILE
            address = "localhost"
            port = 6300
            jmx = false
        }
        finalizedBy 'jacocoTestReport'
    }

    jacocoTestReport {
        reports {
            html.enabled true
            xml.enabled false
            csv.enabled true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it,
                        exclude: [
                                '**/generated',
                                '**/*Dto*.*',
                                '**/*Config*.*',
                                '**/*Stub*.*',
                                '**/BaseTimeEntity*.*',
                                '**/*Properties.*'
                        ])
            }))
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.60
                }

                // Dto, Stub, config, QClass, Properties, BaseTimeEntity
                excludes = [
                        '*.Q*',
                        '*.*Dto*',
                        '*.*Config*',
                        '*.*Stub*',
                        '*.BaseTimeEntity*',
                        '*.*Properties'
                ]
            }

        }
    }

}

def queryDslProjects = [project(':professorlol-core')]
configure(queryDslProjects) {

    def queryDslSrcDir = 'src/main/generated'

    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    querydsl {
        library = "com.querydsl:querydsl-apt"
        jpa = true
        querydslSourcesDir = queryDslSrcDir
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', queryDslSrcDir]
            }
        }
    }
    dependencies {
        compile("com.querydsl:querydsl-jpa") // querydsl
        compile("com.querydsl:querydsl-apt") // querydsl
    }

    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        querydsl.extendsFrom compileClasspath
    }
}


/**
 * main메소드가 필요없는 모듈의 경우 build.gradle에
 * bootJar { enabled = false}* jar {enabled = true}*/

